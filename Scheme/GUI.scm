(define (line begin end)
    (define x car)
    (define y cdr)
    (define (simple-line begin end)
        (define (line-iter cx cy ex d a2b2 a2 result)
        (if (< cx ex)
            (if (< d 0)
                (line-iter (+ cx 1) (+ cy 1) ex (+ d a2b2) a2b2 a2 (cons (cons cx cy) result))
                (line-iter (+ cx 1) cy ex (+ d a2) a2b2 a2 (cons (cons cx cy) result)))
            result))
    (let ((a (- (y begin) (y end)))
        (b (- (x end) (x begin))))
        (line-iter (x begin) (y begin) (x end) (+ (* 2 a) b) (* 2 (+ a b)) (* 2 a) nil)))
    (define (reverse dx dy)
        (if (< (abs dy) (abs dx))
            (lambda (point) point)
            (lambda (point) (cons (y point) (x point)))))
    (define (op dx dy)
        (cond ((and (< 0 dx) (< 0 dy)) (lambda (point) point))
              ((and (< 0 dy) (< dx 0)) (lambda (point) (cons (- (x point)) (y point))))
              ((and (< 0 dx) (< dy 0)) (lambda (point) (cons (x point) (- (y point)))))
              (else (lambda (point) (cons (- (x point)) (- (y point)))))))
    (define (map seq op)
        (if (null? seq) nil (cons (op (car seq)) (map (cdr seq) op))))
    (define (abs x) ((if (< 0 x) + -) x))
    (define (merge f g dx dy)
        (lambda (point) ((f dx dy) ((g dx dy) point))))
    (let ((dx (- (x end) (x begin)))
        (dy (- (y end) (y begin))))
        (map (simple-line ((merge reverse op dx dy) begin)
                          ((merge reverse op dx dy) end))
             (merge op reverse dx dy))))